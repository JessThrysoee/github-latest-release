#!/bin/bash

# prerequisite: openssl, curl, jq, bsdtar (libarchive-tools)

set -euo pipefail

function curl() {
  local auth_token="$1"
  local accept="$2"
  shift 2
  command curl --fail-with-body -sSL \
      ${auth_token:+ -H "Authorization: Bearer ${auth_token}"} \
      ${accept:+ -H "Accept: ${accept}"} \
      "$@"
}

base64() { openssl base64 -e -A | tr -- '+/' '-_' | tr -d = ; }

sign() {
    local message="$1"
    local private_key="$2"
    printf '%s' "$message" | openssl dgst -binary -sha256 -sign <(printf '%s' "$private_key") | base64
}

jwt() {
    local client_id="$1"
    local private_key="$2"

    local now iat exp header claims jwt
    now=$(date +%s)
    iat=$((now - 60))
    exp=$((now + 600))
    header=$(printf '%s' '{ "typ":"JWT", "alg": "RS256" }' | base64)
    claims=$(printf '{ "iss": "%s", "iat": %d, "exp": %d }' "$client_id" "$iat" "$exp" | base64)
    jwt="$header.$claims.$(sign "$header.$claims" "$private_key")"

    printf '%s' "$jwt"
}

fetch_installation_access_token() {
    local installation_id="$1"
    local jwt_token="$2"

    curl "$jwt_token" "application/vnd.github+json" -X POST \
            "https://api.github.com/app/installations/$installation_id/access_tokens" \
        | jq -r '.token'
}

list_download_urls() {
    local auth_token="$1"
    local repo="$2"

    curl "$auth_token" "" "https://api.github.com/repos/${repo}/releases/latest" \
      | jq --unbuffered -r '.assets[].browser_download_url'
}

asset_name() { jq -r '.[] | .name' <<< "$1" ; }

asset_url() { jq -r '.[] | .url' <<< "$1" ; }

asset_print_browser_download_url() { jq -r '.[] | .browser_download_url' <<< "$1" ; }

select_single_download_url() {
    local auth_token="$1"
    local repo="$2"
    local regex="$3"

    matches="$(curl "$auth_token" "" "https://api.github.com/repos/${repo}/releases/latest" \
        | jq --unbuffered -r --arg regex "$regex" '[ .assets[] | select(.browser_download_url|test($regex)) | { url, name, browser_download_url } ]')"

    local length
    if [[ -z $matches ]]; then
        length="0"
    else
        length="$(jq length <<< "$matches")"
    fi

    if (( length != 1 )); then
        echo "found $length matches, refine the pattern '$regex' until exactly one match is found" >&2
        if (( length > 0 )); then
            asset_print_browser_download_url "$matches" >&2
        fi
        exit 1
    else
        printf '%s' "$matches"
    fi
}

fetch_release() {
    local auth_token="$1"
    local asset="$2"
    local output="$3"

    curl "$auth_token" "application/octet-stream" -o "${output:-$(asset_name "$asset")}" "$(asset_url "$asset")"
}

list_files() {
    local auth_token="$1"
    local asset="$2"
    local include_glob_pattern="$3"

    curl "$auth_token" "application/octet-stream" "$(asset_url "$asset")" \
        | bsdtar -t --include "$include_glob_pattern"
}

extract_files() {
    local auth_token="$1"
    local asset="$2"
    local include_glob_pattern="$3"
    local strip_components="$4"
    local directory="$5"

    curl "$auth_token" "application/octet-stream" "$(asset_url "$asset")" \
        | bsdtar -x --include "$include_glob_pattern" --strip-components "$strip_components" -C "$directory"
}

usage() {
    cat <<'EOF'
Usage:

  github-latest-release [-a <auth_token>] -r <OWNER/REPO> -l -p [REGEX]
  github-latest-release [-a <auth_token>] -r <OWNER/REPO> -f -p <REGEX> -o [OUTPUT]
  github-latest-release [-a <auth_token>] -r <OWNER/REPO> -t -p <REGEX> \
                        -i [INCLUDE_GLOB]
  github-latest-release [-a <auth_token>] -r <OWNER/REPO> -x -p <REGEX> \
                        -i [INCLUDE_GLOB] -s [STRIP_COMPONENTS] -c [DIRECTORY]

Options:

  -a <auth_token>
      Authorization token.

     Example:
       github-latest-release -a "$(gh auth token)" -r enterprise/repo -l

  -r <OWNER/REPO>
     The github repo identifier. The 'owner/repo' part of 'https://github.com/owner/repo'

  -l
     List all available download urls. Use the '-p' regex pattern to identify a single
     download url for use in the fetch commands.

     Example:
       github-latest-release -r prometheus/prometheus -l -p 'linux-amd64.tar.gz$'

  -f
     Fetch a release package. Use this if the release is a single executable or to
     download an archive.

     Options:
       -o   passthrough to curl --output

     Example:
       github-latest-release -r 'tsl0922/ttyd' -f -p 'ttyd.mips64$' -o '/tmp/ttyd'

  -t
     Fetch and list files in archive.

     Options:
      -i   passthrough to bsdtar --include

     Example:
       github-latest-release -r prometheus/prometheus -x -p 'linux-amd64.tar.gz$' \
                             -i '*/prometheus'

  -x
     Fetch and extract from an archive.

     Options:
      -i   passthrough to bsdtar --include
      -s   passthrough to bsdtar --strip-components
      -c   passthrough to bsdtar --cd

     Example:
       github-latest-release -r prometheus/prometheus -x -p 'linux-amd64.tar.gz$' \
                             -i '*/prometheus' -s 1 -c /tmp

EOF
}

main() {
    local opt
    local repo=""
    local list_url=""
    local fetch=""
    local list_files=""
    local extract=""
    local regex_pattern=""
    local include_glob_pattern="*"
    local strip_components="0"
    local directory="."
    local auth_token="${GITHUB_AUTH_TOKEN:-}"
    local github_app_client_id="${GITHUB_APP_CLIENT_ID:-}"
    local github_app_installation_id="${GITHUB_APP_INSTALLATION_ID:-}"
    local github_app_private_key="${GITHUB_APP_PRIVATE_KEY:-}"
    local jwt_token=""
    local output=""
    local asset=""

    while getopts ":r:lftxp:i:s:c:a:o:h" opt; do
        case $opt in
            r) repo="$OPTARG" ;;
            l) list_url="1" ;;
            f) fetch="1" ;;
            t) list_files="1" ;;
            x) extract="1" ;;
            p) regex_pattern="$OPTARG" ;;
            i) include_glob_pattern="$OPTARG" ;;
            s) strip_components="$OPTARG" ;;
            c) directory="$OPTARG" ;;
            a) auth_token="$OPTARG" ;;
            o) output="$OPTARG" ;;
            h) usage; exit 0 ;;
            :) echo "Error: -${OPTARG} requires an argument" >&2 ;;
            \?) echo "Invalid option -$OPTARG" >&2 ;;
        esac
    done

    if [[ -z $repo ]]; then
        usage
        exit 1
    fi

    if [[ -n $github_app_client_id && -n $github_app_installation_id && -n $github_app_private_key ]]; then
        jwt_token="$(jwt "$github_app_client_id" "$github_app_private_key")"
        auth_token="$(fetch_installation_access_token "$github_app_installation_id" "$jwt_token")"
    fi

    if [[ -n $list_url ]]; then
        if [[ -n $regex_pattern ]]; then
            asset="$(select_single_download_url "$auth_token" "$repo" "$regex_pattern")"
            asset_print_browser_download_url "$asset"
        else
            list_download_urls "$auth_token" "$repo"
        fi

    elif [[ -n $fetch ]]; then
        asset="$(select_single_download_url "$auth_token" "$repo" "$regex_pattern")"
        fetch_release "$auth_token" "$asset" "$output"

    elif [[ -n $list_files ]]; then
        asset="$(select_single_download_url "$auth_token" "$repo" "$regex_pattern")"
        list_files "$auth_token" "$repo" "$regex_pattern" "$include_glob_pattern"

    elif [[ -n $extract ]]; then
        asset="$(select_single_download_url "$auth_token" "$repo" "$regex_pattern")"
        extract_files "$auth_token" "$asset" "$include_glob_pattern" "$strip_components" "$directory"
    else
        usage
        exit 1
    fi
}

main "$@"

